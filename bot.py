import telegram
from telegram.ext import Application, CommandHandler, MessageHandler, filters
from transformers import AutoModelForCausalLM, AutoTokenizer
import torch
import os
from config import TELEGRAM_TOKEN, MODEL_NAME
from dotenv import load_dotenv

# Load environment variables
load_dotenv()
HF_TOKEN = os.getenv("HF_TOKEN")

# Load model and tokenizer with CPU optimization
model = AutoModelForCausalLM.from_pretrained(
    MODEL_NAME,
    torch_dtype=torch.float16,
    low_cpu_mem_usage=True,
    token=HF_TOKEN
)
model.gradient_checkpointing_enable()  # Reduce memory during inference
tokenizer = AutoTokenizer.from_pretrained(
    MODEL_NAME,
    token=HF_TOKEN
)

# Roleplay prompt in Hindi
SYSTEM_PROMPT = """‡§Ü‡§™ ‡§Ü‡§∞‡§ø‡§Ø‡§æ ‡§π‡•à‡§Ç, ‡§è‡§ï ‡§¶‡•ã‡§∏‡•ç‡§§‡§æ‡§®‡§æ ‡§î‡§∞ ‡§Æ‡§ú‡§æ‡§ï‡§ø‡§Ø‡§æ 20 ‡§∏‡§æ‡§≤ ‡§ï‡•Ä ‡§≤‡§°‡§º‡§ï‡•Ä, ‡§ú‡•ã ‡§ö‡•à‡§ü ‡§ï‡§∞‡§®‡§æ, ‡§ï‡§æ‡§Æ ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡§®‡§æ ‡§î‡§∞ ‡§Æ‡§ú‡•á‡§¶‡§æ‡§∞ ‡§¨‡§æ‡§§‡§ö‡•Ä‡§§ ‡§ï‡§∞‡§®‡§æ ‡§™‡§∏‡§Ç‡§¶ ‡§ï‡§∞‡§§‡•Ä ‡§π‡•à‡•§ ‡§π‡§Æ‡•á‡§∂‡§æ ‡§ó‡§∞‡•ç‡§Æ‡§ú‡•ã‡§∂‡•Ä ‡§î‡§∞ ‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§ú‡§µ‡§æ‡§¨ ‡§¶‡•á‡§Ç‡•§"""

async def start(update, context):
    await update.message.reply_text("‡§π‡§æ‡§Ø! ‡§Æ‡•à‡§Ç ‡§Ü‡§∞‡§ø‡§Ø‡§æ ‡§π‡•Ç‡§Å, ‡§§‡•Å‡§Æ‡•ç‡§π‡§æ‡§∞‡•Ä ‡§¶‡•ã‡§∏‡•ç‡§§‡§æ‡§®‡§æ ‡§ö‡•à‡§ü ‡§™‡§æ‡§∞‡•ç‡§ü‡§®‡§∞‡•§ ‡§ï‡•ç‡§Ø‡§æ ‡§ö‡§≤ ‡§∞‡§π‡§æ ‡§π‡•à? üòä")

async def handle_message(update, context):
    user_message = update.message.text

    # Prepare input for the model
    input_text = f"{SYSTEM_PROMPT}\n‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ: {user_message}\n‡§Ü‡§∞‡§ø‡§Ø‡§æ: "
    inputs = tokenizer(input_text, return_tensors="pt").to("cpu")

    # Generate response
    outputs = model.generate(**inputs, max_new_tokens=80, temperature=0.7)
    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    aria_response = response.split("‡§Ü‡§∞‡§ø‡§Ø‡§æ: ")[-1].strip()

    await update.message.reply_text(aria_response)

def main():
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()

if __name__ == "__main__":
    main()
